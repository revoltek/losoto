# Example of LoSoTo 2.0 parset
# Includes all possible options
#
# step variable override global variable

# this are the global values
soltab = [.*/.*] # can use wildecards, e.g. [sol000/.*,sol001/phase001]
ant = []
pol = [XX, YY]
dir = [pointing]
# any axis can be also restricted to certain values using minmax and regexp
# string used for regex selections, vectors for complete names (equal for 'pol' and 'dir')
# to exclude stations, use ^((?!string1|string2|string3).)*$
# with names containing string1, string2, or string3
axisName.minmaxstep = [0,10,2]
axisName.regexp = RS*
Ncpu = 0 # number of cpus in multithread operations, if 0 use all available cpus

# parameters available in every step to overwrite the global selection
[everystep]
soltab = [sol000/amplitude000,sol000/rotation000]
ant = []
pol = []
dir = []
time = [] # also with .minmax = [min, max, step]

[abs]
operation = ABS

[clip]
operation = CLIP
clipLevel = 5 # factor above/below median at which to clip
axes = [time] # axis along which to calculate the median
log = True # clip is done in log10 space

[clocktec]
operation = CLOCKTEC
flagBadChannels = True # detect and remove bad channel before fitting
flagCut = 1.5
chi2cut = 30000.
combinePol = False # find a combined polarization solution
fitOffset = False

[crossdaly]
operation = CROSSDELAY
soltabOut = phasediff # output table name, same solset
maxRes = 1. # maximum acceptable rms of the residuals in radians before flagging, 0: no check
smooth = 0 # median-smooth in time the resulting delays, number of timestamp for smoothing window
replace = False # replace using smoothed value instead of flag bad data?

[duplicate]
operation = DUPLICATE
soltabOut = '' # a "solset/soltab" string

[flag]
# PARALLEL
operation = FLAG
axesToFlag = time # axes along which to smooth/find outlier (e.g. 'time' or [time, freq]), max 2 values
order = 3  # order of the function fitted during trend removal. If 2 values are given in axes, then 2 values must be given here. If mode=smooth these are the window of the running median (0=all axis).
maxCycles = 5 # number of flagging cycles
maxRms = 5. # rms to clip outliers
maxRmsNoise = 0 # Do a running rms and then flag those regions that have a rms higher than MaxRmsNoise*rms_of_rmses, if 0 ignored
fixRmsNoise = 0 # instead of calculating rms of the rmses use this value (it will not be multiplied by the MaxRmsNoise), if 0 ignored
windowNoise = 11 # window for the running rms
reaplce = False # replace bad values with the interpolated ones, instead of flagging them
preFlagZeros = False # flag zeros/ones (bad solutions in BBS). They should be flagged at import time
mode = smooth # smooth / poly / spline
refAnt = '' # antenna name for referencing phases, can be "auto" to get the least flagged among the 10 closest to the array centre

[faraday]
operation = FARADAY
maxResidual = 1. #  max average residual in rad before flagging datapoint# 0: no check
refAnt = '' # a reference antenna

[flagextend]
# PARALLEL
operation = FLAGEXTEND
axesToExt = ['freq','time'] # axes used to find close flags
size = [11,11] # size of the window (diameter, per axis), if 0 is given then the entire length of the axis is assumed, must be a vector of same length of Axes
percent = 90 # percent of flagged data around the point to flag it
maxCycles = 3 # number of independent cycles of expansion

[norm]
operation = NORM
normVal = 1.
axesToNorm = [time,ant]

[plot]
# PARALLEL
operation = PLOT
axesInPlot = # 1- or 2-element array which says the coordinates to plot (2 for 3D plots)
axisInTable = '' # the axis to plot on a page - e.g. ant to get all antenna's on one file
axisInCol = '' # the axis to plot in different colours - e.g. pol to get correlations with different colors
axisDiff = '' # this must be a len=2 axis and the plot will have the differential value - e.g. 'pol' to plot XX-YY
NColFig = 0 # Number of columns in a multi-table image, if 0 then it is automatically chosen
figSize = [0,0] # Size of the image [x,y], if one of the values is 0, then it is automatically chosen
minmax = [0,0] # min max value for the independent variable (0 means automatic)
log = "" # log='XYZ' to set which axes to put in Log
plotFlag = False
doUnwrap = False
refAnt = '' # antenna name for referencing phases
soltabToAdd = [] # tables to "add" (e.g. 'sol000/tec000'), it works only for tec and clock to be added to phases
makeAntPlot = False # Make a plot containing antenna coordinates in x,y and in color the value to plot, Axes must be [ant]
makeMovie = False # make a movie summing up all the produced plots
prefix = '' # name prefix for output file

[reset]
operation = RESET

[residuals]
operation = RESIDUALS
soltabsToSub = [tec000,clock000] # tables to subtract from the same solset (rotationmeasure, clock, tec, tec3rd can be subtracted only from a phase table)
ratio = False # return the ratio instead of subtracting

[reweight]
operation = REWEIGHT
weightVal = 1. # Set weights to this values
nmedian = 1
nstddev = 251
soltabImport = sol000/amplitude000
flagBad = False # re-flag bad values

[smooth]
operation = SMOOTH # running median on an arbitrary number of axes - running polyfit on 1 axis or set all solutions to mean/median value
axesToSmooth = [freq, time] # axes to smooth
size = [10, 5] # window size for the runningmedian and runningpoly
mode = runningmedian # runningmedian or runningpoly or mean or median (these last two values set all the solutions to the mean/median)
degree = 1 # degrees of the polynomia for the runningpoly
replace = False # Flagged data are replaced with smoothed value and unflagged
log = True # smooth is done in log10 space
